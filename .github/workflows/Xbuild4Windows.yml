# Copyright (c) 2022 okibcn
# This is free software, licensed under the GNU General Public License v3.0
# See /LICENSE for more information.
# https://github.com/okibcn/nano-editor
# Description: Builds nano for Windows from a Debian Linux

name: Xbuild4Windows
on: 
  schedule:
    - cron: '57 0 * * *'
  # runs at 0:57 UTC every day
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Run the build with tmate debugging enabled true/false (default: false)'     
        required: false
        default: 'false'

jobs:
  build:
    runs-on: ubuntu-latest
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
    steps:
    - name: "‚è¨ Checkout repository"
      uses: actions/checkout@v4

    - name: "‚úîÔ∏è Pre-build checks"
      run: |
        git clone --depth=1 -n git://git.savannah.gnu.org/nano.git
        cd nano
        LAST_NANO=$( TZ=UTC git show --quiet --date='format-local:%Y-%m-%dT%H:%M:%SZ' --format="%cd" )
        CHANGES_NANO="$(git log -1 --pretty=%B)"
        cd ..
        git clone --depth=1 -n https://github.com/mirror/ncurses.git
        cd ncurses
        LAST_NCURSES=$( TZ=UTC git show --quiet --date='format-local:%Y-%m-%dT%H:%M:%SZ' --format="%cd" )
        CHANGES_NCURSES="$(git log -1 --pretty=%B)"
        cd ..
        rm -rf nano ncurses
        LAST_RELEASE=$( wget -q https://api.github.com/repos/okibcn/nano-editor/releases/latest -O - | awk -F \" -v RS="," '/published_at/ {print $(NF-1)}' ) \
          || LAST_RELEASE="2000.01.01T00:00:00Z"

        if [[ $LAST_NANO>$LAST_RELEASE ]]; then 
          echo "NEW NANO SOURCE!!!!"
          echo "**NANO CHANGES**" > body.txt
          echo >> body.txt
          echo "$CHANGES_NANO" >> body.txt
          echo >> body.txt
          echo >> body.txt
        fi 
        if [[ $LAST_NCURSES>$LAST_RELEASE ]]; then 
          echo "NEW NCURSES SOURCE!!!!"
          [ -f body.txt ] && echo >> body.txt
          echo "**NCURSES CHAGES**" >> body.txt
          echo >> body.txt
          echo "$CHANGES_NCURSES" >> body.txt
        fi

        if [ -f body.txt ]; then
          BODY=$(<body.txt)
          echo "BODY<<EOF" >> $GITHUB_ENV
          echo "$BODY" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "CANCEL=false" >>  $GITHUB_ENV
        else
          echo "NO NEW SOURCES. CANCELLING ACTION..."
          echo "CANCEL=true" >>  $GITHUB_ENV
        fi

    - name: "üëã Cancelling Actions"
      if:  env.CANCEL == 'true' 
      uses: andymckay/cancel-action@0.3

    - name: "‚è¨ Install Toolchain OS Tools"
      run: |
        # FAST UBUNTU SERVERS
        sudo sed -i -e 's|azure.archive.ubuntu.com|ubuntu.securedservers.com|g' /etc/apt/sources.list
        sudo -E apt -qq update

        # sudo -E apt -qq update && sudo apt upgrade -y
        sudo -E apt -qq install -y mingw-w64 autoconf automake autopoint gcc gettext git groff make pkg-config texinfo p7zip-full

    # - name: Set up MinGW
    #   uses: egor-tensin/setup-mingw@v2

    - name: "üêû Debug session"
      uses: mxschmitt/action-tmate@v3
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled == 'true'
        ## More info at https://til.simonwillison.net/github-actions/debug-tmate
        ##           or https://github.com/mxschmitt/action-tmate 

    - name: "‚è¨ Download Sources"
      run: |
        git clone git://git.savannah.gnu.org/nano.git
        cd nano
        git clone https://github.com/mirror/ncurses.git
        git log -n 1
        cd ncurses
        git log -n 1
        cd ..
        ./autogen.sh

    - name: "‚öôÔ∏è Apply Portability Patches"
      run: |
        cd nano

        # 1. >realpath< function doesn't exist on Windows, which isn't fully POSIX compliant.
        # 2. Adding windows.h for supporting keypress detection.
        echo " " >> ./src/definitions.h
        echo "#ifdef _WIN32" >> ./src/definitions.h
        echo "#include <windows.h>"  >> ./src/definitions.h
        echo "#define realpath(N,R) _fullpath((R),(N),0)" >> ./src/definitions.h
        echo "#endif" >> ./src/definitions.h

        # Change default terminal to nothing
        sed -i 's|vt220||g' ./src/nano.c

        # Fix homedir detection
        sed -i 's|\"HOME\"|"USERPROFILE\"|g' ./src/utils.c

        # Modify temporal path from linux to windows
        sed -i 's|TMPDIR|TEMP|g' ./src/files.c

        # Modify path expansion with backslashes
        sed -i "/free(tilded)/a\
          \\\\tfor(tilded = retval; \*tilded; ++tilded) if(\*tilded == '\\\\\\\\') \*tilded = '/';

          s|path\[i\] != '/'|path[i] != '/' \&\& path[i] != '\\\\\\\\'|" src/files.c

        # Solve SHIFT, ALT and CTRL keys
        sed -i 's/waiting_codes = 1;/waiting_codes = 0;\
            if (GetAsyncKeyState(VK_LMENU) < 0)	key_buffer[waiting_codes++] = ESC_CODE;\
            key_buffer[waiting_codes++] = input;/

            /TIOCLINUX/c \\tmodifiers \= 0;\
            if(GetAsyncKeyState(VK_SHIFT) < 0) modifiers |\= 0x01;\
            if(GetAsyncKeyState(VK_CONTROL) < 0) modifiers |\= 0x04;\
            if(GetAsyncKeyState(VK_LMENU) < 0) modifiers |\= 0x08;\
            if \(\!mute_modifiers) \{' src/winio.c
        sed  -i '/parse_kbinput/!b
            :a
            s/__linux__/_WIN32/;t trail
            n;ba
            :trail
            n;btrail' src/winio.c

        # default open() files in binary mode as it does in linux
        sed -i 's/O_..ONLY/& | _O_BINARY/g' ./src/files.c
        sed -i 's/O_..ONLY/& | _O_BINARY/g' ./src/text.c

        # Adding static ncurses revision and patch level to nano version info.
        LAST_VERSION="$(wget -q https://api.github.com/repos/okibcn/nano-editor/releases/latest -O - | awk -F \" -v RS="," '/tag_name/ {print $(NF-1)}')" \
          || echo "FIRST RELEASE!!!!"
        NANO_VERSION="$(git describe --tags 2>/dev/null | sed "s/.\{10\}$//")-$(git rev-list --count HEAD)"
        LAST_BASEVERSION="$(echo $LAST_VERSION | awk -F .  '{print $1"."$2}')"  # last version without the subbuild
        if [ "${NANO_VERSION}" == "${LAST_BASEVERSION}" ]; then
          # This is a new Windows build based on the same nano build, probably because there is a new ncurses patch
          SUBBUILD="$(echo $LAST_VERSION | awk -F .  '{print $3}')"
          ((SUBBUILD=SUBBUILD+1))
          NANO_VERSION="${NANO_VERSION}.${SUBBUILD}"
        fi
        cd ncurses
        NCURSES=$(git show -s --format=%s)
        cd ..
        sed -i 's|Compiled options|Using '"${NCURSES}"'\\n &|' src/nano.c
        sed -i '/SOMETHING = "REVISION/cSOMETHING = "REVISION \\"'"${NANO_VERSION}"' for Windows\\""' src/Makefile.am
        echo "Version Tag: ${NANO_VERSION}"
        echo "NANO_VERSION=${NANO_VERSION}" >>$GITHUB_ENV



    - name: "‚öôÔ∏è Build for Windows 64 bits"
      run: |
        cd nano
        ##########################
        ##                        ##
        ##   BUILD FOR x86_64     ##
        ##                        ##
        ##########################
        ARCH="x86_64"

        BUILD="$(gcc -dumpmachine)"
        TARGET="${ARCH}-w64-mingw32"
        OUTDIR="$(pwd)/pkg_${TARGET}"

        export CFLAGS="-O2 -g3 -flto"
        export CPPFLAGS="-D__USE_MINGW_ANSI_STDIO -I\"${OUTDIR}/include\""
        export LDFLAGS="-L\"${OUTDIR}/lib/\" -static -flto -static-libgcc"
        export NCURSESW_CFLAGS="-I\"${OUTDIR}/include/ncursesw\" -DNCURSES_STATIC"
        export NCURSESW_LIBS="-lncursesw"
        export LIBS="-lshlwapi" # -lbcrypt"

        # cross Build ncurses for destination host 
        mkdir -p "$(pwd)/build_${TARGET}/ncurses"
        cd "$(pwd)/build_${TARGET}/ncurses"
        rm -rf *
        ../../ncurses/configure --prefix="${OUTDIR}"  \
          --enable-{widec,sp-funcs,termcap,term-driver,interop}  \
          --disable-{shared,database,rpath,home-terminfo,db-install,getcap,echo}  \
          --without-{progs,ada,cxx-binding,manpages,pthread,debug,tests,libtool}  \
          --build="${BUILD}" --host="${TARGET}" || exit 1
        make -j$(($(nproc)*2)) && make install || exit 1
        cd ../..

        # Build nano
        [ "${ARCH}" = "x86_64" ] && bits="64" || bits="32"
        sed -i 's/Windows.*/Windows '"${bits}"' bits\\""/' src/Makefile.am
        mkdir -p "$(pwd)/build_${TARGET}/nano"
        cd "$(pwd)/build_${TARGET}/nano"
        rm -rf *
        ../../configure --host="${TARGET}" --prefix="${OUTDIR}"  \
          --enable-utf8 --disable-{nls,speller} \
          --sysconfdir="C:\\ProgramData" || exit 1
        make -j$(($(nproc)*2)) && make install-strip || exit 1

    - name: "‚öôÔ∏è Build for Windows 32 bits"
      run: |
        cd nano
        ############################
        ##                          ##
        ## BUILD FOR i686 (32 bits) ##
        ##                          ##
        ############################
        ARCH="i686"

        BUILD="$(gcc -dumpmachine)"
        TARGET="${ARCH}-w64-mingw32"
        OUTDIR="$(pwd)/pkg_${TARGET}"

        export CFLAGS="-O2 -g3 -flto"
        export CPPFLAGS="-D__USE_MINGW_ANSI_STDIO -I\"${OUTDIR}/include\""
        export LDFLAGS="-L\"${OUTDIR}/lib/\" -static -flto -static-libgcc"
        export NCURSESW_CFLAGS="-I\"${OUTDIR}/include/ncursesw\" -DNCURSES_STATIC"
        export NCURSESW_LIBS="-lncursesw"
        export LIBS="-lshlwapi" # -lbcrypt"

        # cross Build ncurses for destination host 
        mkdir -p "$(pwd)/build_${TARGET}/ncurses"
        cd "$(pwd)/build_${TARGET}/ncurses"
        rm -rf *
        ../../ncurses/configure --prefix="${OUTDIR}"  \
          --enable-{widec,sp-funcs,termcap,term-driver,interop}  \
          --disable-{shared,database,rpath,home-terminfo,db-install,getcap,echo}  \
          --without-{progs,ada,cxx-binding,manpages,pthread,debug,tests,libtool}  \
          --build="${BUILD}" --host="${TARGET}" || exit 1
        make -j$(($(nproc)*2)) && make install || exit 1
        cd ../..

        # Build nano
        [ "${ARCH}" = "x86_64" ] && bits="64" || bits="32"
        sed -i 's/Windows.*/Windows '"${bits}"' bits\\""/' src/Makefile.am
        mkdir -p "$(pwd)/build_${TARGET}/nano"
        cd "$(pwd)/build_${TARGET}/nano"
        rm -rf *
        ../../configure --host="${TARGET}" --prefix="${OUTDIR}"  \
          --enable-utf8 --disable-{nls,speller} \
          --sysconfdir="C:\\ProgramData" || exit 1
        make -j$(($(nproc)*2)) && make install-strip || exit 1
        cd ../..

    - name: "üì¶ Create Package"
      run: |
        cd nano
        ############################
        ##                          ##
        ##      CREATE PACKAGE      ##
        ##                          ##
        ############################

     
        strip -s pkg_{i686,x86_64}-w64-mingw32/bin/nano.exe
        cp doc/sample.nanorc.in .nanorc
        7z a -aoa -mmt"$(nproc)" --  \
          "nano-editor_${{ env.NANO_VERSION }}.7z"  \
          pkg_{i686,x86_64}-w64-mingw32/{bin/nano.exe,share/{nano,doc}/}  \
          .nanorc  || exit 1
        cd ..


    - name: "üëç Upload release"
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.NANO_VERSION }}
        files: nano/*.7z
        body: |
          ${{ env.BODY }}